{"version":3,"sources":["mocks/requestLogicHandlers.ts","mocks/browser.ts"],"names":["definition","require","id","items","paths","get","responses","content","examples","value","requestLogicHandlers","postItem","request","push","body","timestamp","Date","now","_id","String","putItem","item","index","findIndex","params","itemId","putItems","itemUpdates","itemUpdate","deleteItem","splice","deleteItems","worker","setupWorker","handlers"],"mappings":"oNAGaA,EAAaC,EAAQ,IAE9BC,EAAK,EAEHC,EACJH,EAAWI,MAAM,UAAUC,IAAIC,UAAU,KAAOC,QAAQ,oBACrDC,SAAS,aAAaC,MAiCZC,EA/BoC,CACjDC,SADiD,SACxCC,GACPT,EAAMU,KAAN,2BACMD,EAAQE,MADd,IAEEC,UAAWC,KAAKC,MAChBC,IAAKC,OAAOjB,OAEf,EACDkB,QARiD,SAQzCR,GACN,IAAMS,EAAOT,EAAQE,KACfQ,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQN,EAAQY,OAAOC,MAAtC,IAC9BtB,EAAMmB,GAASD,CAChB,EACDK,SAbiD,SAaxCd,GACP,IADgB,EACVe,EAAcf,EAAQE,KADZ,cAESa,GAFT,yBAELC,EAFK,QAGRN,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQU,EAAWV,GAAlC,IAC9Bf,EAAMmB,GAASM,CAJD,EAEhB,2BAAuC,GAFvB,+BAMjB,EACDC,WApBiD,SAoBtCjB,GACT,IAAMU,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQN,EAAQY,OAAOC,MAAtC,IAC9BtB,EAAM2B,OAAOR,EAAO,EACrB,EACDS,YAxBiD,SAwBrCnB,GAAU,IAAD,gBACFA,EAAQE,MADN,yBACRZ,EADQ,QAEXoB,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQhB,CAAvB,IAC9BC,EAAM2B,OAAOR,EAAO,EAHH,EACnB,2BAAgC,GADb,+BAKpB,GCpCUU,EAASC,IAAW,WAAX,cACjBC,YAAS,CAAElC,cAAcU,I","file":"static/js/4.a7cf2b67.chunk.js","sourcesContent":["import { RequestLogicHandlers } from '@visma/msw-openapi-backend-integration';\nimport type { Components } from '../client';\n\nexport const definition = require('../TodoMVC-API.json');\n\nlet id = 0;\n\nconst items: Components.Schemas.Items =\n  definition.paths['/items'].get.responses['200'].content['application/json']\n    .examples['example-1'].value;\n\nconst requestLogicHandlers: RequestLogicHandlers = {\n  postItem(request) {\n    items.push({\n      ...(request.body as object),\n      timestamp: Date.now(),\n      _id: String(id++),\n    });\n  },\n  putItem(request) {\n    const item = request.body as Components.Schemas.Item;\n    const index = items.findIndex((item) => item._id === request.params.itemId);\n    items[index] = item;\n  },\n  putItems(request) {\n    const itemUpdates = request.body as Components.Schemas.Items;\n    for (const itemUpdate of itemUpdates) {\n      const index = items.findIndex((item) => item._id === itemUpdate._id);\n      items[index] = itemUpdate;\n    }\n  },\n  deleteItem(request) {\n    const index = items.findIndex((item) => item._id === request.params.itemId);\n    items.splice(index, 1);\n  },\n  deleteItems(request) {\n    for (const id of request.body) {\n      const index = items.findIndex((item) => item._id === id);\n      items.splice(index, 1);\n    }\n  },\n};\nexport default requestLogicHandlers;\n","import { setupWorker } from 'msw';\nimport { handlers } from '@visma/msw-openapi-backend-integration';\nimport requestLogicHandlers, { definition } from './requestLogicHandlers';\n\nexport const worker = setupWorker(\n  ...handlers({ definition }, requestLogicHandlers)\n);\n"],"sourceRoot":""}
{"version":3,"sources":["../../../../msw-openapi-backend-integration/lib/main.js","mocks/requestLogicHandlers.ts","mocks/browser.ts"],"names":["_OpenAPIBackend","OpenAPIBackend","__esModule","definition","require","id","items","paths","get","responses","content","examples","value","requestLogicHandlers","postItem","request","push","body","timestamp","Date","now","_id","String","putItem","item","index","findIndex","params","itemId","putItems","itemUpdates","itemUpdate","deleteItem","splice","deleteItems","worker","setupWorker","options","api","register","c","res","ctx","status","x","requestLogicHandler","operation","operationId","response","mock","json","mockResponseForOperation","methods","Object","keys","rest","flatMap","method","servers","map","url","req","path","href","slice","length","handleRequest","handlers"],"mappings":"uNAGMA,EACJC,KAAkBA,IAAeC,WAC7BD,IAAc,QACdA,I,oBCHOE,EAAaC,EAAQ,KAE9BC,EAAK,EAEHC,EACJH,EAAWI,MAAM,UAAUC,IAAIC,UAAU,KAAOC,QAAQ,oBACrDC,SAAS,aAAaC,MAiCZC,EA/BoC,CACjDC,SADiD,SACxCC,GACPT,EAAMU,KAAN,2BACMD,EAAQE,MADd,IAEEC,UAAWC,KAAKC,MAChBC,IAAKC,OAAOjB,SAGhBkB,QARiD,SAQzCR,GACN,IAAMS,EAAOT,EAAQE,KACfQ,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQN,EAAQY,OAAOC,UACpEtB,EAAMmB,GAASD,GAEjBK,SAbiD,SAaxCd,GACP,IADgB,EACVe,EAAcf,EAAQE,KADZ,cAESa,GAFT,yBAELC,EAFK,QAGRN,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQU,EAAWV,OAChEf,EAAMmB,GAASM,GAFjB,2BAAuC,IAFvB,gCAOlBC,WApBiD,SAoBtCjB,GACT,IAAMU,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQN,EAAQY,OAAOC,UACpEtB,EAAM2B,OAAOR,EAAO,IAEtBS,YAxBiD,SAwBrCnB,GAAU,IAAD,gBACFA,EAAQE,MADN,yBACRZ,EADQ,QAEXoB,EAAQnB,EAAMoB,WAAU,SAACF,GAAD,OAAUA,EAAKH,MAAQhB,KACrDC,EAAM2B,OAAOR,EAAO,IAFtB,2BAAgC,IADb,iCC/BVU,EAASC,IAAW,WAAX,cFIf,SAAkBC,GAAoC,IAA3BxB,EAA2B,uDAAJ,GACjDyB,EAAM,IAAItC,EAAgBqC,GAChCC,EAAIC,SAAS,YAAY,SAACC,EAAGC,EAAKC,GAAT,OAAiBD,EAAIC,EAAIC,OAAO,SAEzDL,EAAIC,SAAS,kBAAkB,SAACC,EAAGC,EAAKC,EAAKE,GAC3C,IAAMC,EAAsBhC,EAAqB2B,EAAEM,UAAUC,aAC7D,GAAIF,EAAqB,CACvB,IAAMG,EAAWH,EAAoBL,EAAEzB,SACvC,GAAIiC,EAAU,CACZ,IAAQL,EAAiBK,EAAjBL,OAAQM,EAASD,EAATC,KAChB,OAAOR,EAAIC,EAAIC,OAAOA,GAASD,EAAIQ,KAAKD,KAG5C,MAAyBT,EAAEF,IAAIa,yBAC7BX,EAAEM,UAAUC,aADNJ,EAAR,EAAQA,OAAQM,EAAhB,EAAgBA,KAGhB,OAAOR,EAAIC,EAAIC,OAAOA,GAASD,EAAIQ,KAAKD,OAG1C,IAAMG,EAAUC,OAAOC,KAAKC,KAE5B,OAAOH,EAAQI,SAAQ,SAACC,GAAD,OACrBpB,EAAQlC,WAAWuD,QAAQC,KAAI,gBAAGC,EAAH,EAAGA,IAAH,OAC7BL,IAAKE,GAAL,UAAgBG,EAAhB,OAAyB,SAACC,EAAKpB,EAAKC,GAElC,OADAmB,EAAIC,KAAOD,EAAID,IAAIG,KAAKC,MAAMJ,EAAIK,QAC3B3B,EAAI4B,cAAcL,EAAKpB,EAAKC,YE5BtCyB,CAAS,CAAEhE,cAAcU","file":"static/js/4.12bfb0cb.chunk.js","sourcesContent":["import { rest } from 'msw';\nimport OpenAPIBackend from 'openapi-backend';\n\nconst _OpenAPIBackend =\n  OpenAPIBackend && OpenAPIBackend.__esModule\n    ? OpenAPIBackend['default']\n    : OpenAPIBackend;\n\nexport function handlers(options, requestLogicHandlers = {}) {\n  const api = new _OpenAPIBackend(options);\n  api.register('notFound', (c, res, ctx) => res(ctx.status(404)));\n\n  api.register('notImplemented', (c, res, ctx, x) => {\n    const requestLogicHandler = requestLogicHandlers[c.operation.operationId];\n    if (requestLogicHandler) {\n      const response = requestLogicHandler(c.request);\n      if (response) {\n        const { status, mock } = response;\n        return res(ctx.status(status), ctx.json(mock));\n      }\n    }\n    const { status, mock } = c.api.mockResponseForOperation(\n      c.operation.operationId\n    );\n    return res(ctx.status(status), ctx.json(mock));\n  });\n\n  const methods = Object.keys(rest);\n\n  return methods.flatMap((method) =>\n    options.definition.servers.map(({ url }) =>\n      rest[method](`${url}/*`, (req, res, ctx) => {\n        req.path = req.url.href.slice(url.length);\n        return api.handleRequest(req, res, ctx);\n      })\n    )\n  );\n}\n","import { RequestLogicHandlers } from '@visma/msw-openapi-backend-integration';\nimport type { Components } from '../client';\n\nexport const definition = require('../TodoMVC-API.json');\n\nlet id = 0;\n\nconst items: Components.Schemas.Items =\n  definition.paths['/items'].get.responses['200'].content['application/json']\n    .examples['example-1'].value;\n\nconst requestLogicHandlers: RequestLogicHandlers = {\n  postItem(request) {\n    items.push({\n      ...(request.body as object),\n      timestamp: Date.now(),\n      _id: String(id++),\n    });\n  },\n  putItem(request) {\n    const item = request.body as Components.Schemas.Item;\n    const index = items.findIndex((item) => item._id === request.params.itemId);\n    items[index] = item;\n  },\n  putItems(request) {\n    const itemUpdates = request.body as Components.Schemas.Items;\n    for (const itemUpdate of itemUpdates) {\n      const index = items.findIndex((item) => item._id === itemUpdate._id);\n      items[index] = itemUpdate;\n    }\n  },\n  deleteItem(request) {\n    const index = items.findIndex((item) => item._id === request.params.itemId);\n    items.splice(index, 1);\n  },\n  deleteItems(request) {\n    for (const id of request.body) {\n      const index = items.findIndex((item) => item._id === id);\n      items.splice(index, 1);\n    }\n  },\n};\nexport default requestLogicHandlers;\n","import { setupWorker } from 'msw';\nimport { handlers } from '@visma/msw-openapi-backend-integration';\nimport requestLogicHandlers, { definition } from './requestLogicHandlers';\n\nexport const worker = setupWorker(\n  ...handlers({ definition }, requestLogicHandlers)\n);\n"],"sourceRoot":""}